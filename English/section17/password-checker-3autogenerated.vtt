WEBVTT

00:00.620 --> 00:03.400
We're getting so close I can almost see the finish line.

00:03.410 --> 00:05.210
So hang in there.

00:05.300 --> 00:13.820
We now have the hash and the count so we can finalize this function of get password leaks get in here

00:13.880 --> 00:15.900
as we're looping through each item.

00:16.010 --> 00:19.220
What do we want to check.

00:19.220 --> 00:29.120
Well we want to check that if the hash that is the tail of the hash here is equal to hash to check.

00:29.130 --> 00:36.090
Remember hash to check is the tail end of our hashed password that we never send to anybody that is

00:36.090 --> 00:37.290
on our own machine.

00:37.290 --> 00:44.190
So it's nice and secure and we're going to check this because the API returned us a list of these tailed

00:44.190 --> 00:45.430
hashes.

00:45.600 --> 00:52.140
So if that matches well in that case I want you to return the count.

00:52.140 --> 00:53.230
So I want to return.

00:53.370 --> 01:02.650
How many times this password has been leaked otherwise just return zero.

01:03.030 --> 01:11.040
Again I can do this because it's going to exit out of this loop whenever it sees the return keyword.

01:11.040 --> 01:20.040
Now in my post API check I'm going to run this function which entail is going to grab all this information

01:20.070 --> 01:30.100
and return the count of the times that the hashed password has been leaked so we have one last thing

01:30.100 --> 01:30.760
to do.

01:30.880 --> 01:37.510
That is the ability to actually print out the result of all these calculations.

01:37.510 --> 01:47.960
So let's remove this for now and create a main function and this main function is going to receive the

01:47.960 --> 01:52.910
arguments that we give it right in here in our command line.

01:52.910 --> 02:01.240
So we're going to import as you might have seen before the CIS module and in here we're going to have

02:01.240 --> 02:06.440
a main function that receives the arguments which is the passwords that we want to check.

02:06.610 --> 02:09.060
And for now we'll just pass here.

02:09.190 --> 02:19.910
But at the bottom we're going to call the main function with the CIS dot ARG V and accept any number

02:19.910 --> 02:20.780
of arguments.

02:20.930 --> 02:28.070
After we do the Python 3 Check My passed up pie and then we give it all the arguments that we want which

02:28.070 --> 02:29.200
are the passwords.

02:29.300 --> 02:34.810
So we're going to run the function like this this main function.

02:34.810 --> 02:42.220
All it's going to do is we're going to say for password in the arguments because we can give it multiple

02:42.220 --> 02:53.340
passwords we're going to loop through that and we're going to have a sha 1 password and a count or we'll

02:53.340 --> 03:01.850
just do the count because we're going to receive the count from the get password leaks count so we can

03:01.850 --> 03:12.650
do that by just doing pound API check and we'll pass it the password that we're checking and all we're

03:12.650 --> 03:21.370
going to do is actually inside of this block say if count exists in that case I want you to print an

03:21.440 --> 03:24.260
F string and this f string is going to say

03:26.740 --> 03:40.530
password that we're looping through was found the count of how many times and then we'll say you should

03:40.530 --> 03:47.020
probably change your password

03:50.040 --> 03:54.510
otherwise if that means there's no count that is.

03:54.610 --> 03:57.700
There were no matches then you're all good.

03:57.700 --> 04:10.950
We can say F string password was not found carry on.

04:10.980 --> 04:12.270
So that's a good password.

04:12.330 --> 04:14.140
You should carry on your all get.

04:14.160 --> 04:23.420
And then finally just for fun let's return out of this function return done just like that if I say

04:23.450 --> 04:23.920
this.

04:23.930 --> 04:25.240
Let's see what this gives us.

04:26.240 --> 04:28.220
I'm going to say Python 3.

04:28.280 --> 04:30.020
Check my pass and let's just check.

04:30.020 --> 04:38.820
Hello I get Hello was not fun to carry on but we know that hello was found before right.

04:38.840 --> 04:43.630
I mean that's a simple password we should actually get something good here.

04:43.700 --> 04:49.520
Now I also want to remove this response of print since we don't need it anymore.

04:49.520 --> 04:52.540
Can you spot the air again.

04:52.560 --> 04:56.210
This is a bit of a tricky part with Python right.

04:56.220 --> 04:59.310
It's the indentation in something that we've seen before.

04:59.340 --> 05:04.290
So you want to get good at debugging your own code and figuring out what happens in this case we can

05:04.290 --> 05:11.820
go step by step through the code but we can think we actually never tested this can't function and if

05:11.820 --> 05:15.680
we look over here are indentation is a little bit off right.

05:15.690 --> 05:21.270
We have the if check but then we always return 0.

05:21.570 --> 05:29.820
This return should be like this after the for loop after we've checked everything nothing has been match

05:29.880 --> 05:32.420
then we should return 0.

05:32.490 --> 05:37.190
So if I save and run this again.

05:37.360 --> 05:38.060
All right.

05:38.060 --> 05:39.260
Now it's working.

05:39.350 --> 05:44.900
You notice that's one simple slight error can give you completely different results.

05:44.900 --> 05:52.700
So it's always good to go step by step and try out something with something that you already know works.

05:52.700 --> 05:58.520
And it's also important to use your debugging skills so you'll develop throughout the course to try

05:58.520 --> 05:59.910
and figure things out.

06:00.080 --> 06:04.880
Now no programmer is going to write a perfect program right off the bat.

06:04.880 --> 06:09.920
Most of the time you're trying to figure out why you're getting this error why this is happening and

06:09.920 --> 06:14.400
this is just something that you become better and better at as you code.

06:14.420 --> 06:19.460
So the only cure to this is to just keep coding hopefully throughout the course.

06:19.490 --> 06:25.640
You've seen some of the errors that I make in how I debug them so that you start to adopt these patterns

06:25.730 --> 06:26.750
as well.

06:26.750 --> 06:28.580
Anyway this is awesome.

06:28.580 --> 06:30.440
This is finally working.

06:30.440 --> 06:31.760
Let's try a couple more things.

06:31.760 --> 06:36.130
Let's say by and then some gibberish.

06:36.210 --> 06:36.770
All right.

06:36.780 --> 06:39.330
Looks like this is working as well.

06:39.330 --> 06:44.810
This is awesome our password checker is working.

06:44.940 --> 06:48.750
Now I want to do one more thing here to finish out this project.

06:48.750 --> 06:50.280
So let's do that in the next video.
