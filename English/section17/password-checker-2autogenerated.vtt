WEBVTT

00:00.660 --> 00:01.400
Welcome back.

00:01.410 --> 00:09.120
Let's continue building our awesome tool we have our pond API check that only converts our password

00:09.300 --> 00:14.360
to SHA 1 but we need to send this to the API.

00:14.420 --> 00:16.030
The password API.

00:16.250 --> 00:18.150
So what can we do here.

00:18.170 --> 00:24.650
The first thing we want to do is remember we only need the first five characters of our password or

00:24.650 --> 00:34.850
the hashed password so we can do something fun here we can say first five characters and also have what

00:34.850 --> 00:35.930
we call the tail.

00:36.020 --> 00:41.720
So we're going to store the first five characters in the first variable and in the second variable we're

00:41.720 --> 00:46.340
going to store the remaining because we're going to need both of these later on.

00:46.970 --> 00:56.280
So in here we can just use the nifty little thing that well Python allows us which is this nice little

00:56.280 --> 01:07.770
syntax to just grab the start up to the fifth character and then for the second part the remaining characters.

01:07.770 --> 01:12.210
So starting from the fifth index all the way till the end.

01:12.240 --> 01:13.530
Nice and easy.

01:13.530 --> 01:16.450
And this is something that we've learned about before.

01:16.500 --> 01:25.450
So now we have the first five characters and the tail and here we can now add this to our request API

01:25.450 --> 01:31.710
data so I can now call my request API data and in here give it.

01:31.720 --> 01:37.620
Well the first five characters and let's just draw the response in here.

01:43.160 --> 01:45.820
Now let's see what type of response we get.

01:45.820 --> 01:52.820
So I'm actually going to return response here and just so we make sure that we're doing everything right.

01:52.850 --> 02:01.330
Let's print out the first five characters and the tail as well to make sure that everything is working.

02:01.370 --> 02:02.210
If I run this

02:05.910 --> 02:08.510
right it looks like I'm getting the first five characters.

02:08.560 --> 02:13.050
There's a space here and then the remaining and we don't get to any error.

02:13.080 --> 02:16.530
It looks like the response is working.

02:16.530 --> 02:18.360
So let's also print the response

02:23.630 --> 02:25.420
and make sure that that is working as well.

02:26.710 --> 02:31.760
Looks like we get a response of two hundred but we're still not sure exactly what type of data we receive.

02:32.530 --> 02:34.150
What can we do here.

02:34.150 --> 02:36.890
Well I want to learn more about this data that we return.

02:36.910 --> 02:45.760
So let's create a another function here and for now we'll just call it read response and we'll going

02:45.760 --> 02:47.920
to just give it the response that we get.

02:48.400 --> 02:51.460
And in here let's just try to read this response.

02:51.490 --> 03:00.330
We can actually do print response dot text here because it's an API response so ideally we can just

03:00.330 --> 03:01.990
read the text.

03:02.130 --> 03:04.130
Let's see if that does anything.

03:04.140 --> 03:16.460
So this return response we'll just have read response like so if I run this Hey look at that.

03:16.590 --> 03:22.020
This is our response as you can see it's a ton of hashed passwords.

03:22.030 --> 03:24.940
There's a lot of them it looks like a couple of hundred.

03:24.970 --> 03:29.950
So this is what we get from our response by using response not text.

03:29.950 --> 03:36.560
We get all the hashes that match the beginning of our hashed password.

03:36.640 --> 03:47.150
Very cool what we can actually do you see over here how we get 24 3 1 and so on.

03:47.210 --> 03:52.560
This shows you actually how many times these passwords have been hacked.

03:52.610 --> 03:53.840
That's pretty cool.

03:53.840 --> 03:59.900
So ideally we're able to grab the count see if any of it matches with our tail because now we can just

03:59.900 --> 04:09.120
check the tail and also print out the count so instead of having a read response function let's have

04:09.150 --> 04:27.080
a get password leaks count function that sees the hashes or the response and the actual hash to check

04:27.320 --> 04:30.800
which is our own password hash that we need to check against.

04:30.800 --> 04:35.390
So we're going to check this hash to check and loop through all the hashes

04:38.190 --> 04:41.790
so we can do something again nifty with Python here.

04:42.030 --> 04:50.340
We can say hashes equals and we can use a temple here and we can actually do a temple comprehension

04:50.790 --> 05:01.710
which we've seen before I can say line dot split so we're going to split everything in the line which

05:01.710 --> 05:04.710
is by these Collins over here that you can see.

05:04.710 --> 05:09.160
So that's the tail of the hash and the number of times it's been hacked.

05:09.180 --> 05:16.290
So we're going to split it by the call in and then we're going to loop and say for line.

05:16.290 --> 05:18.690
So that's where the line comes from.

05:18.690 --> 05:24.840
For line in hashes dot text.

05:24.880 --> 05:31.120
Now if I leave it like this this actually won't work and I'll show you why in a second actually let's

05:31.120 --> 05:31.920
just do that now.

05:31.960 --> 05:38.190
So let's see what print hashes will give us instead of read response.

05:38.190 --> 05:40.320
We'll run this one now.

05:40.440 --> 05:42.170
So get password leaks count.

05:42.420 --> 05:44.250
And if I run let's clear this

05:48.580 --> 05:49.890
I get an error.

05:50.260 --> 05:53.910
Well I get an error because we have to add the hash to check as well.

05:53.920 --> 05:56.230
So what should the hash the check be.

05:56.230 --> 06:00.090
Well it's the tail right the tail of our actual password.

06:00.520 --> 06:07.800
So I'm going to add the tale to the second parameter save and run again.

06:07.820 --> 06:08.690
All right.

06:08.690 --> 06:12.780
I get a response two hundred and I get a generator object.

06:13.160 --> 06:14.560
This generator object.

06:14.570 --> 06:16.060
We can actually loop through.

06:16.090 --> 06:16.540
Right.

06:16.550 --> 06:19.750
So let's see what happens if I do for.

06:19.790 --> 06:22.110
Remember we have the hash and the.

06:22.190 --> 06:31.700
So let's do hash H for hash and count in hashes because remember we've converted to a temple that has

06:31.700 --> 06:36.650
the hash and then the count because we're splitting.

06:36.740 --> 06:46.540
Remember so if we do this let's just print H and count if I run this

06:49.510 --> 06:58.810
home I get an error value error not enough values to unpack expected to got one.

06:58.920 --> 06:59.860
Why is that.

06:59.880 --> 07:08.950
Let's just print H and see what happens and remove count for now let's clear this and run this again.

07:10.690 --> 07:11.280
Hmm.

07:11.460 --> 07:14.880
It looks like we didn't split properly.

07:14.880 --> 07:18.510
Every item is its own list

07:21.190 --> 07:26.440
so we actually have to use something called split lines here on our string.

07:26.440 --> 07:36.010
And as you can see it returns a list of the lines in the string and it breaks at the line boundaries.

07:36.010 --> 07:44.290
So when we actually do a for loop over the hash text if we scroll up we'll see if we can see it.

07:44.300 --> 07:45.390
No it's not there anymore.

07:46.430 --> 07:54.260
But if we scroll up we just got a massive list of text ideally on each line.

07:54.290 --> 08:03.650
We split this so that this line is well instead of each individual element the actual hash and count.

08:03.650 --> 08:11.700
So we just need to do dot split lines like this I save this and run.

08:11.790 --> 08:16.010
Once again that's a lot better.

08:16.020 --> 08:23.460
So now we have what we want we can once again go back to what we had before which is count and if we

08:23.460 --> 08:29.240
print H and count let's save run this again and that's a lot better.

08:29.420 --> 08:32.560
We have each item separated.

08:32.770 --> 08:35.350
Let's take a break and continue this in the next video.
