WEBVTT

00:01.000 --> 00:02.080
Welcome back.

00:02.080 --> 00:08.800
We just learned about the password API and how this API allows us to trust no one.

00:08.800 --> 00:15.190
That is we only trust ourselves and we're only going to give the bits of information that we feel comfortable

00:15.250 --> 00:22.120
to the API so that it gives us a response with some data that we can then calculate on our own machines

00:22.120 --> 00:25.200
that are hypothetically more secure.

00:25.240 --> 00:33.910
So what we did here is that instead of giving the entire hash of our password we just give a little

00:33.910 --> 00:34.710
bit of it.

00:34.840 --> 00:41.740
The first five characters now they have close to 600 million passwords in their database.

00:41.740 --> 00:49.000
And the Web site now maybe just knows that we're part of several hundred people that have a similar

00:49.300 --> 00:57.900
starting hash but they're never going to know our password but with this response data we can now check

00:58.080 --> 01:03.860
our full hash to see if the password has ever been post or has ever been hacked.

01:03.990 --> 01:11.190
So let's start writing our program because ideally in this response I now have maybe several hundred

01:11.490 --> 01:19.250
lists of these hashes that I can check against let's think about what we want to do.

01:19.320 --> 01:30.260
So ideally we have let's say a function and this function will be the request API data which is what

01:30.260 --> 01:30.970
we've done here.

01:30.980 --> 01:36.980
So we'll move that down here once we're ready and here we'll give it the query characters.

01:36.980 --> 01:41.330
So that is we're going to give it this hashed version of our password.

01:41.870 --> 01:45.970
So this is going to be a function that for now we'll just pass.

01:46.250 --> 01:54.240
But this is going to request our data and give us a response next with this response.

01:54.430 --> 02:04.090
We actually want to check so we can say that we want to check the pond API check and in here we'll give

02:04.120 --> 02:13.930
our password that is our actual password in our case will be password 1 2 3 and in here we want to do

02:13.930 --> 02:14.920
some sort of a check.

02:15.070 --> 02:28.670
We want to say check password if it exists in API response from up here.

02:28.680 --> 02:31.060
So for now we'll just pass that.

02:31.170 --> 02:35.400
So let's work on the first one that is request API data.

02:35.400 --> 02:37.680
We've already done some of this over here.

02:37.770 --> 02:38.490
Right.

02:38.550 --> 02:47.230
I'm actually going to move this code up here.

02:47.360 --> 02:52.210
Make sure we have the padding now in here instead of this string.

02:52.250 --> 03:00.190
I'll actually give the query character that we'll call the function with so that it's dynamic and again

03:00.190 --> 03:03.280
we'll request that your URL will have the response.

03:03.400 --> 03:05.400
And in here we'll do a check.

03:05.560 --> 03:15.580
We'll say if response dot status because remember we can check our response if the status is two hundred

03:16.510 --> 03:23.650
or in this case let's say if the status is not equal to two hundred in that case let's just raise an

03:23.650 --> 03:23.970
error.

03:23.980 --> 03:33.960
So I'll say raise we'll do a runtime error and we'll say well let's use an F string and we'll say error

03:36.220 --> 03:37.200
fetching.

03:37.570 --> 03:47.980
And then we'll give it the status code so that as response dot status and actually this is status code.

03:47.980 --> 03:59.700
So let's just do status code here and then we'll just say check the API and try again all right.

03:59.710 --> 04:06.820
So this should be our error if we make a mistake let's just test that out.

04:06.940 --> 04:07.950
I'm going to just.

04:08.380 --> 04:12.070
Let's do an API that doesn't exist.

04:12.070 --> 04:14.250
So I just written some gibberish here.

04:14.250 --> 04:21.190
If I save and run this well I have to actually run this piece of code.

04:21.430 --> 04:31.140
So let's just do request API data and that query character is going to be one two three and you know

04:31.140 --> 04:36.450
what this is going to air out whether I do that or not so let's just do this because it's not the hash

04:36.450 --> 04:44.610
version and I actually get a python error of type error can only concatenate string not end.

04:44.820 --> 04:50.860
So we can just convert this to a string because remember we're adding it to the you are all here again.

04:50.930 --> 04:53.630
If we run this all right.

04:53.640 --> 04:54.310
Look at that.

04:54.360 --> 04:57.660
We've raised a runtime error.

04:57.690 --> 05:00.330
We have a runtime error error fetching 400.

05:00.390 --> 05:02.210
Check the API and try again.

05:02.220 --> 05:02.420
All right.

05:02.430 --> 05:10.470
So this part is working but in this case if we don't have that air let's just say that we will return

05:10.890 --> 05:15.100
the response again we're just writing small simple functions.

05:15.120 --> 05:17.570
In this case we just want our request API data.

05:17.580 --> 05:19.970
So now we can use it throughout our code.

05:20.010 --> 05:21.170
Awesome.

05:21.180 --> 05:29.940
Now this next part is a little tricky because we have to run our password through the SHA 1 algorithm.

05:29.940 --> 05:39.310
Luckily Python has a built in module for us to do this so we can actually do import hash lip as you

05:39.310 --> 05:44.650
can see it's a built in module so you can read up more on it if you want.

05:44.650 --> 05:52.330
In our case we're able to do SHA 1 hashing like we did on our Web site with this library in here where

05:52.360 --> 05:58.480
we're going to do is first of all I want to be able to hash my password.

05:58.680 --> 06:07.090
So let's remove the pass here and say SHA 1 password and we can use the hash lib like this hash lib

06:07.930 --> 06:15.640
dot Sha one which is the hashing algorithm we want to use and this is going to be a little tricky but

06:15.670 --> 06:21.550
you can just read the documentation I'll just show you how to do it in our case we can do password and

06:21.550 --> 06:24.940
we want to encode in UTF 8

06:28.080 --> 06:30.520
which is pretty standard actually.

06:30.600 --> 06:30.990
You know what.

06:30.990 --> 06:32.250
Let me show you what this does.

06:32.250 --> 06:38.180
So I'm going to say print and I'll just do password and code UTF 8.

06:38.250 --> 06:39.580
So let's just do that for now.

06:39.580 --> 06:41.750
For now I'm going to comment that.

06:42.270 --> 06:47.000
So I'm going to call pound API check and we'll do one two three.

06:47.040 --> 06:50.940
Let's clear this point to save and run this piece of code

06:54.340 --> 06:54.840
all right.

06:54.860 --> 06:55.730
It's encoded.

06:55.730 --> 06:59.240
You see this little bee over here in UTF 8.

06:59.270 --> 07:04.390
I'll actually show you what happens when we remove the ENCODE after this next.

07:04.430 --> 07:06.910
When we use the hash lib.

07:06.940 --> 07:08.720
Siobhan so let me just copy this

07:12.720 --> 07:22.180
if I just run this I get a sha 1 hash object now.

07:22.260 --> 07:28.620
After this we can call dot hex digest like so.

07:28.620 --> 07:34.990
And if I run this Hmm well how can we check this.

07:34.990 --> 07:43.860
Well we can go to hash lib and just simply search for hex digest so in here at any point you can ask

07:43.860 --> 07:48.430
it for the digest of the concatenation of the data blah blah blah hex digest.

07:48.530 --> 07:50.480
So that doesn't really explain anything for us.

07:50.510 --> 07:59.080
Let's just go to the next part and the next part and then go hex digest it returns a String object of

07:59.080 --> 08:03.260
double length containing only hex and decimal digits.

08:03.310 --> 08:10.670
This is just something that we need to do in order to convert this object into this hexadecimal string.

08:10.900 --> 08:16.030
The next part in order to agree with the API is to convert all of this to objects.

08:16.030 --> 08:24.760
So if I do up a here and I save and run this again everything is an opera case just like we saw when

08:24.760 --> 08:32.030
we looked at Sha 1 So this is just something that again you don't really need to know you just have

08:32.030 --> 08:37.320
to can google around and see how to actually use this.

08:37.400 --> 08:41.660
Now let me show you what happens when we don't use UTF 8 and code.

08:41.660 --> 08:50.570
So if I just do it like this and I run this you see that I get an error the unicode objects must be

08:50.570 --> 08:52.460
encoded before hashing.

08:52.460 --> 08:58.970
So it actually gives you a nice error and we can just encoded using UTF 8 like that.

08:58.970 --> 09:00.250
So this is just the standard.

09:00.260 --> 09:01.670
Again nothing too crazy.

09:01.670 --> 09:06.720
You can read up on encoding and UTF 8 if you want on your own.

09:06.740 --> 09:12.200
The key here is that by the end of it we have a sha 1 password that we can send.

09:12.200 --> 09:23.000
So let me just copy all of this going to remove the print and in here we'll have our SHA 1 password

09:23.850 --> 09:36.850
awesome so for now let's just return this SHA 1 password and if I run this well looks like our code

09:36.850 --> 09:44.060
is working we're not printing anything but hopefully we are getting this SHA 1 password now in the next

09:44.060 --> 09:50.200
video I actually want to try and send this to our API and see what kind of response we get.

09:50.210 --> 09:51.720
Let's do that take a break.

09:51.740 --> 09:52.460
I'll see in the next one.
