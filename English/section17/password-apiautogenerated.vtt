WEBVTT

00:00.300 --> 00:01.080
All right.

00:01.200 --> 00:06.700
Let's get to our first step of building our secure password checker now in here.

00:06.700 --> 00:09.520
I have a check my pass DOT pie file.

00:09.520 --> 00:10.420
You can do the same.

00:10.450 --> 00:13.200
And then I have my terminal right over here.

00:13.450 --> 00:18.490
What we want to do is initially import the Requests module.

00:18.490 --> 00:19.080
If you haven't.

00:19.120 --> 00:27.830
Well then you can install the request module the request module is going to allow us to make a request.

00:27.840 --> 00:33.000
So remember it's kind of like having a browser without while the actual browser.

00:33.390 --> 00:39.000
We can just manually request something as if we have a browser and we get some data back.

00:39.030 --> 00:45.330
So the way we can actually use their request module with the password API is that we can have the password

00:45.360 --> 00:48.410
API U.R.L. which I'll just tell you what it is.

00:48.450 --> 00:57.290
It's a s calling slash slash API dot pound passwords

01:00.350 --> 01:03.660
and then we give it a range Slash.

01:03.800 --> 01:14.250
And in here this is where we give it the password so we can just do plus and let's just for now do password

01:14.790 --> 01:24.200
1 2 3 so that's the you are all that we're going to use to make this a little bit smaller like that.

01:24.300 --> 01:33.870
Now in here we're going to get a response by doing the requests dot get and let's just type this in

01:33.870 --> 01:39.380
and see what happens if I save and run this program.

01:39.470 --> 01:44.380
And remember we don't have the ability to type in the passwords yet.

01:44.450 --> 01:48.140
So let's just run the file.

01:48.310 --> 01:48.560
All right.

01:48.570 --> 01:55.860
So we get something but it looks like an error and that's because I did HDD CBS silly me.

01:56.460 --> 01:58.880
But again I want to show you that.

01:58.890 --> 02:05.900
Yeah right here I'm able to read the errors and it looks like it it's an invalid schema no connection

02:05.900 --> 02:12.990
adapter for while a TDD B.S. So if we run that again all right.

02:13.040 --> 02:14.210
It looks like it worked.

02:14.270 --> 02:15.200
No errors.

02:15.200 --> 02:24.050
But let's print this out to see why we get so print response and I'm going to run this and we got response

02:24.100 --> 02:31.900
four hundred now a response or 400 is not good.

02:31.900 --> 02:38.220
Usually that means on authorized or something's not right with the API.

02:38.280 --> 02:43.810
Now these are response codes are something we'll get into and the web development section of the course.

02:44.010 --> 02:46.800
But it just means that for hundreds not good.

02:46.830 --> 02:49.500
We want to response of two hundred two hundred means.

02:49.500 --> 02:50.640
OK.

02:50.700 --> 02:57.340
And the reason this happens is because this is not how the API actually works.

02:57.390 --> 02:59.900
You see here we just gave it a password.

03:00.240 --> 03:05.910
But the way that this API works is it uses something called hashing.

03:05.910 --> 03:07.010
Now what does that mean.

03:08.460 --> 03:13.590
I'm going to include a bonus lesson after this one so that you can learn a little bit more about hashing

03:14.220 --> 03:17.300
but I have here this Web site that I'm going to link to.

03:17.400 --> 03:18.810
Then let's make this a little bit bigger.

03:19.500 --> 03:26.460
Hopefully I can see it's a sha 1 hash generator now hashing a password.

03:26.470 --> 03:29.390
It's something that you should always do.

03:29.410 --> 03:34.890
Let's say you're saving a user's password to a database.

03:34.930 --> 03:38.950
You should never store a user's password in what we call plaintext.

03:38.950 --> 03:41.520
That is exactly what the password is.

03:41.530 --> 03:45.160
Instead we want to do something called hash it that is.

03:45.160 --> 03:50.190
Run it through a hashing algorithm to make it gibberish.

03:50.200 --> 03:55.720
So when I do password one two three here and I click generate and I scroll down.

03:55.720 --> 03:58.990
This is the hashed password.

03:59.230 --> 04:08.000
Notice here that as I change this password this changes as well but the key here and this is something

04:08.000 --> 04:13.370
that we'll talk about in that bonus video is that hashing is a one way function.

04:13.700 --> 04:15.790
So there's many different hashing algorithms.

04:15.800 --> 04:19.060
There's empty files there's SHA 256.

04:19.280 --> 04:26.900
We're using SHA 1 because this is what this API is using and SHA 1 essentially just hashes it's a an

04:26.990 --> 04:34.470
algorithm that is a function that does this gibberish output of password 1 2 3.

04:34.490 --> 04:41.650
But no matter how many times we generate password 1 2 3 it's always going to be the same hash so this

04:41.650 --> 04:49.150
way we can actually check if somebody types a password and we already have the hashed version of a password

04:49.180 --> 04:55.960
and let's say a database we can actually compare the hashed version of this password to the database

04:56.080 --> 05:02.270
hashed password again don't get too confused here hopefully in that bonus video we'll cover this a little

05:02.270 --> 05:10.940
bit more but the key thing is that this API because we want to be as secure as possible is well we don't

05:10.940 --> 05:14.690
want to send over the wire our real password.

05:15.380 --> 05:19.750
Instead we want to send this hashed version of our password.

05:20.120 --> 05:29.690
So if I copy this and put it over here this is what we should be sending to the API but here's the problem.

05:29.910 --> 05:37.020
This is still not super secure because anybody can come now and type in and keep guessing keep guessing

05:37.020 --> 05:46.230
keep guessing and eventually hit on password one two three and see oh this hash is the exact same one

05:46.230 --> 05:47.500
as this hash.

05:47.550 --> 05:50.240
So they will know that this is our password.

05:50.880 --> 05:56.670
So this API uses a technique called Kate anonymity.

05:56.670 --> 06:04.020
And this is actually a modern technique that big companies like Google Facebook Netflix Amazon all use

06:05.490 --> 06:14.590
k anonymity allows somebody to receive information about us yet still not know who we are.

06:14.690 --> 06:15.880
How does this work.

06:16.160 --> 06:22.880
By the way this is actually a technique that is used a lot especially now where using personal data

06:22.940 --> 06:25.220
for companies it's frowned upon.

06:25.340 --> 06:28.550
So ideally you don't want to give your personal information to companies.

06:28.550 --> 06:36.110
So some companies that care about security and privacy use this K anonymity to track you but still not

06:36.110 --> 06:37.900
know who you are.

06:37.970 --> 06:47.960
Now the way this works is that we only give the first five characters of our hash password.

06:47.990 --> 06:52.140
So one two three four five.

06:52.220 --> 07:02.060
So if I remove this what this API is going to do is it has a list of all the passwords that have been

07:02.060 --> 07:02.870
leaked.

07:03.230 --> 07:09.190
However although these passwords are hashed with these SHA 1 algorithm.

07:09.350 --> 07:17.900
So it's going to look in its database of all these passwords and pick all the hashed passwords that

07:17.900 --> 07:21.180
have the first five characters that match this.

07:21.200 --> 07:29.870
So this way with a response we're going to get all the passwords that are hashed that have this so that

07:29.990 --> 07:38.360
on our end when we receive that response we can check the rest of the hash function this way.

07:38.360 --> 07:45.290
This API is never going to know our full hash and therefore never ever be able to guess our password

07:46.570 --> 07:53.770
they'll just know that we have this tiny bit of a hash function that can match any hundreds of passwords.

07:53.770 --> 07:55.110
How cool is that.

07:55.120 --> 08:04.030
So if I actually say this and run I get a response of 200 awesome all right.

08:04.030 --> 08:04.900
Let's take a break.

08:04.960 --> 08:09.480
Learn a little bit more about hashing and see you in the next video by.
